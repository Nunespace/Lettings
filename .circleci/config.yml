# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1
  heroku: circleci/heroku@2.0.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build_and_test: # this can be any name you choose
    docker:
      - image: cimg/python:3.12.0
    

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pipenv
      - run:
          name: Run tests
          command: pipenv run pytest # alternatively run `python -m pytest` if you are running vanilla pytest
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
  build-and-push-docker-image:
    docker:
      - image: cimg/python:3.9.6
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build and push docker image
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$TAG --build-arg SECRET_KEY=${SECRET_KEY} --build-arg DSN=${DSN} .
            #docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$TAG .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG
  
  deploy_on_heroku: # this can be any name you choose
    machine:true
    steps:
      - checkout
      - run:
          name: Build and push Docker image to Heroku
          command: |
           sudo curl https://cli-assets.heroku.com/install.sh | sh
           HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
           HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push ${HEROKU_APP_NAME} web
           HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release ${HEROKU_APP_NAME} web


workflows:
  main:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - build_and_test
      - build-and-push-docker-image:
          requires:
              - build_and_test
          filters:
            branches:
              only: main
      - deploy_on_heroku:
          requires:
            - build-and-push-docker-image
          filters:
            branches:
              only: main



